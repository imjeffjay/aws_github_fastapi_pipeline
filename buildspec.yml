version: 0.2

phases:
  pre_build:
    commands:
      - echo "Validating environment variables..."
      - echo "AWS_REGION=$AWS_REGION"
      - echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"
      - echo "ECR_REPO_NAME=$ECR_REPO_NAME"
      - echo "CONTAINER_NAME=$CONTAINER_NAME"
      - echo "AUTH_TYPE=$AUTH_TYPE"
      - echo "SERVER=$SERVER"
      - echo "Authenticating to GitHub..."
      - echo "Authenticating to Docker Hub..."
      - echo "$DOCKERTOKEN" | docker login --username "$DOCKERUSERNAME" --password-stdin
      - git config --global user.name "$(GITHUB_OWNER)"
      - git config --global user.email "$(GITHUB_OWNER)@users.noreply.github.com"
      - git clone https://${AUTH_TYPE}:${GITHUB_TOKEN}@github.com/${GITHUB_OWNER}/${GITHUB_REPO}.git repo
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - cd repo

  build:
    commands:
      - echo "Building Docker image..."
      - docker build -t $ECR_REPO_NAME .
      - docker tag $ECR_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest
      - echo "Pushing Docker image to ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest
      - echo "Docker image pushed successfully!"

  post_build:
    commands:
      - echo "======== DEBUG Checking Environment Variables ========"
      - echo "CONTAINER_NAME=$CONTAINER_NAME"
      - echo "ECR_REPO_NAME=$ECR_REPO_NAME"
      - echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"
      - echo "AWS_REGION=$AWS_REGION"
      - echo "======== START POST BUILD ========"
      - echo "Writing image definitions file..."
      - printf '[{"name":"%s","imageUri":"%s.dkr.ecr.%s.amazonaws.com/%s:latest"}]' "$CONTAINER_NAME" "$AWS_ACCOUNT_ID" "$AWS_REGION" "$ECR_REPO_NAME" > imagedefinitions.json
      - echo "Validating imagedefinitions.json format..."
      - cat imagedefinitions.json | jq '.' || { echo "Invalid JSON format!"; exit 1; }
      - echo "Checking if imagedefinitions.json exists before uploading artifacts..."
      - ls -lah
      - if [ -f imagedefinitions.json ]; then echo "imagedefinitions.json exists!"; else echo "ERROR imagedefinitions.json is missing!"; exit 1; fi
      - echo "======== END POST BUILD ========"

artifacts:
  files:
    - imagedefinitions.json 
  discard-paths: yes  


